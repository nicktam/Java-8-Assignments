package basicassignment;

//*1)Define 2 classes “First” and “Second” with member variables , member functions and constructors of  your choice. 
//Now define a class “Two” in which define main function . 
//In main function create various instances of First and Second  and call their individual member functions.

class First
{
	public void disp1()
	{System.out.println("In First");
	}
	First()
	{System.out.println("In First constructor");
	}
}
class Second
{
	public void disp2()
	{System.out.println("In Second");
		}
	Second()
	{System.out.println("In Second constructor");
	}
}
public class Two
{
	public static void main (String args[])
	{ First f = new First();
	Second s = new Second();
	f.disp1();
	s.disp2();
	}
}

******************************************************************
package basicassignment;

//*2)Create a class with static and non-static member variables.
//Define static and non-static member functions.
//Create instance of this class and call both static and non-static member functions.*//

 class Base
 {
	 int k=10;
	 public void disp1()
	 { System.out.println("In Base non static member");
	 	 }
	 int a=2;
	 static void disp2()
	 { System.out.println("In Base Static member");
 	 }
 }
 public class Demo
 {
	 public static void main(String args[])
	 { Base b = new Base();
	 b.disp1();
	 Base.disp2();
	 }
 }
 
********************************************************************
package basicassignment;
//3)Define a class “Check” in which declare member variables using  different accessibility modifiers 
//i.e.  <default>, private ,public and protected.
//Define a function “disp”  which should be public.  Define a class “CheckDemo” in which you will write “main()” function.
//Create an instance of  the class “Check” and  show how many  variables can be accessed directly and how many indirectly.

class Check {
	int a = 10;
	public int b = 20;
	private int c = 30;
	protected int d = 40;
	
	public void disp()
	{
		System.out.println("When Accessed Directly");
	}
	
	public int getD() {
		return d;
	}

	public void setD(int d) {
		this.d = d;
	}

	public int getC() {
		return c;
	}

	public void setC(int c) {
		this.c = c;
	}

	public int getB() {
		return b;
	}

	
	public void setB(int b) {
		this.b = b;
	}

	
	public int getA() {
		return a;
	}

	public void setA(int a) {
		this.a = a;
	}
	
}

public class Check_Demo
{
public static void main(String args[])
{
	Check ch = new Check();
	System.out.println(ch.getA());
	System.out.println(ch.getB());
	System.out.println(ch.getC());
	System.out.println(ch.getD());
	ch.disp();
	System.out.println(ch.a);
	System.out.println(ch.b);
	//System.out.println(ch.c);
	System.out.println(ch.d);
}
}

********************************************************************

package basicassignment;
//4)Show the example of single level inheritance with constructor invocation.

class Base
{
	public void disp()
	{System.out.println("In Base");
		}
Base()
{ System.out.println("in Base Constructor");
}
}
class Sub extends Base
{
	public void disp()
	{System.out.println("In Sub");
		}
Sub()
{ System.out.println("in Sub Constructor");
}
}


public class Demo1
{
	public static void main(String args[])
	{
	Sub s = new Sub();
	Base b = new Base();
	}
}

*****************************************************
package basicassignment;
//5)Show the example of multi-level inheritance with constructor invocation.
class Base
{
	public void disp()
	{System.out.println("In Base");
		}
Base()
{ System.out.println("in Base Constructor");
}
}
class Sub extends Base
{
	public void disp()
	{System.out.println("In Sub");
		}
Sub()
{ System.out.println("in Sub Constructor");
}
}
class Sub1 extends Sub
{
	public void disp()
	{System.out.println("In Sub1");
		}
Sub1()
{ System.out.println("in Sub1 Constructor");
}
}


public class Demo1
{
	public static void main(String args[])
	{
	Sub1 s1 = new Sub1();
	Sub s = new Sub();
	Base b = new Base();
	}
}
*******************************************************
package basicassignment;

import org.omg.Messaging.SyncScopeHelper;

//10)Define an interface “Vehicle” with “start()” function .
//Now derive  classes like “TwoWheeler”, “ThreeWheeler”,”FourWheeler” etc. from “Vehicle” and  override “start()” function.
//Define a class “VDemo” in which  write  main()  function. 
//In the main function create a reference to Vehicle  class referring to any of the sub class.
//Using this reference, call “start" method.

interface Vehicle
{ public void start();
}

class TwoWheeler implements Vehicle
{ public void start()
	{ System.out.println("In TwoWheeler");
		}
}

class ThreeWheeler implements Vehicle
{ public void start()
	{ System.out.println("In ThreeWheeler");
		}
	}
class FourWheeler implements Vehicle
{ public void start()
	{ System.out.println("In FourWheeler");
		}
	}
public class VDemo
{public static void main (String args[])
{ Vehicle v = new TwoWheeler();
Vehicle v1 = new ThreeWheeler();
Vehicle v2 = new FourWheeler();
v.start();
v1.start();
v2.start();
}
}

