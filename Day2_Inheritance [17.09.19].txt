
/*1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.
Also show, if needed how will u invoke parent class constructor from child class ? 
*/


class Base
{
		Base()
	{ 	System.out.println("In Base");
	
	}
}

class sub extends Base
{
	sub()
	{ System.out.println("In Sub");
	}
}

class sub1 extends sub
{ 
	sub1()
	{ System.out.println("In Sub1");
		}
}
public class Demo
{
	public static void main(String args[])
	{
		sub1 s1 = new sub1();
	}
}


/*2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler.
How will u override "start()" method of parent class ?*/


class Vehicle
{ 
	public void start()
	{ 
		System.out.println("In Vehicle");
	}
}

class fourwheeler extends Vehicle
{
	public void start ()
	{ 
		System.out.println("In Fourwheeler");
	}
}
public class demo
{
	public static void main(String args[])
	{
		fourwheeler F = new fourwheeler ();
		F.start();
	}
}




/*3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.*/


class Base
{
	Base()
	{ System.out.println("In Base");
	
	}
}

class sub extends Base
{
	sub()
	{ System.out.println("In Sub");
	}
}

class sub1 extends Base
{ 
	sub1()
	{ System.out.println("In Sub1");
		}
}
public class Demo
{
	public static void main(String args[])
	{
		sub1 s1 = new sub1();
		sub u = new sub();
	}
}



/*4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.*/

class Top1
{
	public void disp1 ()
	{ System.out.println("In Top1");
	}
}
class bottom1 extends Top1
{
	public void disp1 ()
	{ System.out.println("In Bottom1");
}
}
class bottom2 extends Top1
{
	public void disp1 ()
	{ System.out.println("In Bottom2");
}
}
class bottom3 extends Top1
{
	public void disp1 ()
	{ System.out.println("In Bottom3");
}
}


public class Demo1 {

	public static void main(String[] args) {
		Top1 a = new bottom3();
		Top1 b = new bottom2();
		Top1 c = new bottom1();

		a.disp1();
		b.disp1();
		c.disp1();

	}

}


/*5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.*/

 abstract class Shape
 {abstract void draw();
 }
 class Triangle extends Shape
 { 
	 public void draw()
	 {
		 System.out.println("In Triangle"); 
	 }
 }
	 class Polygon extends Shape
	 { 
		 public void draw()
		 {
			 System.out.println("In Polygon"); 
		 }
	 }
		 class Circle extends Shape
		 { 
			 public void draw()
			 {
				 System.out.println("In Shape"); 
			 }
		 }
public class Demo
{
	public static void main(String args[])
	{
	Shape arr[] = new Shape [3];
	arr [0] = new Triangle ();
	arr [1] = new Polygon ();
	arr [2] = new Circle ();
	for(int i=0; i<arr.length; i++)
	arr[i].draw();
	}
 }

/*6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.*/

 interface A
 {
 public void disp1();
 }
 interface B extends A
 {
 public void disp2();
 }
 class C implements B
 {
	 public void disp2()
	 {
		 System.out.println("In disp2");
	 }
	 public void disp1()
	 {
		 System.out.println("In disp1");
	 }
 }
 public class Question_6
 {
	 public static void main (String args[])
	 {
		 C c = new C();
		 c.disp1();
		 c.disp2();
	 }
 }

/*7) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.*/

class Parent1
{public void disp()
	{
	System.out.println("In Parent1");
	}
}
interface Parent2
{public void disp();
}
class child extends Parent1 implements Parent2
{
	public void disp()
	{
		System.out.println("in Child");
	}
}
public class Question_7
{
	public static void main (String args[])
	{
		child c = new child ();
		c.disp();
	}
}


/*8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors. */

class Base1
{
	int k=10;
	Base1(int k)
	{
		System.out.println(k);
	}
			}
class sub1 extends Base1
{
	
	int num=5, num1=2, num2=4;

sub1()
{
	super(10);
	System.out.println("In Default sub1");
}

sub1(int num)
{
	super(10);
	System.out.println("One Parameter in Sub1");
}
 
sub1( int num1,int num2)
{
	super(10);
	System.out.println("Two Parameter in Sub1");
}
}


public class Question_8
{
	public static void main(String args[])
	{
		sub1 s = new sub1(10,20);
		
	}
}


/*9) create interface "Game" , have an abstract method "play()".
 *  from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.
inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. 
Call "perform()" method from main function.*/

interface Game
{ 
	abstract void play();
}
class Cricket implements Game
{ 
	public void play()
	{
		System.out.println("In Cricket");
	}
}
class Football implements Game
{ 
	public void play()
	{
		System.out.println("In Football");
	}
}

class Tennis implements Game
{ 
	public void play()
	{
		System.out.println("In Tennis");
	}
}

public class Demo
{ 
	static void perform(Game ref)
	{ 
		ref.play();
	}
	
public static void main(String args[])
{ 
	perform(new Football());
	perform(new Tennis());
}

}

